Introduction to Stack and Queue Data Structures
Stack:
A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack will be the first one to be removed. Stacks are analogous to a stack of plates where you can only add or remove plates from the top. Common operations in a stack include:

Push: Adding an element to the top of the stack.
Pop: Removing the top element from the stack.
Peek/Top: Retrieving the top element without removing it.
Stacks are used in various applications such as reversing a word, backtracking algorithms (like finding a path in a maze), and in the implementation of function calls in recursion.

Queue:
A queue is a linear data structure that follows the First In, First Out (FIFO) principle. This means that the first element added to the queue will be the first one to be removed. Queues are similar to a line of people waiting for a service where the first person in line is the first to be served. Common operations in a queue include:

Enqueue: Adding an element to the end of the queue.
Dequeue: Removing the front element from the queue.
Front/Peek: Retrieving the front element without removing it.
Queues are widely used in scenarios like scheduling processes in operating systems, handling requests in web servers, and in breadth-first search algorithms.

Understanding stacks and queues is fundamental in computer science as they provide the basis for more complex data structures and algorithms.
